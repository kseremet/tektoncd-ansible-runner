- hosts: localhost
  connection: local
  gather_facts: no
  collections:
    - kubernetes.core
  tasks:
    - name: Generate a new virtual disk download token
      set_fact:
        token: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits') }}"

    - name: Create a new VirtualMachineExport Token
      k8s:
        state: present
        resource_definition: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: vmexport-token-{{ vm_name }}
            namespace: {{ namespace }}
          stringData:
            token: "{{ token }}"
        wait: yes
      
    - name: Create a new VirtualMachineExport object
      k8s:
        state: present
        resource_definition: |
          apiVersion: export.kubevirt.io/v1alpha1
          kind: VirtualMachineExport
          metadata:
            name: vmexport-{{ vm_name }}
            namespace: {{ namespace }}
          spec:
            tokenSecretRef: vmexport-token-{{ vm_name }}
            source:
              apiGroup: ""
              kind: PersistentVolumeClaim
              name: {{ pvc_name }}
        wait: yes
        wait_condition:
          reason: PodReady
          status: "True"
          type: Ready
        
    - name: Get the VirtualMachineExport object
      k8s_info:
        api_version: export.kubevirt.io/v1alpha1
        kind: VirtualMachineExport
        namespace: "{{ namespace }}"
        name: vmexport-{{ vm_name }}
      register: vmexport
      
    - name: Get virtual disk download url
      set_fact:
        download_url: "{{ (vmexport | json_query(jmesquery))[0] }}"
      vars:
         jmesquery: resources[0].status.links.internal.volumes[0].formats[?format=='raw'].url
         
    - name: Print download url
      debug:
        var: download_url

    - name: Ensure download directory exists
      ansible.builtin.file:
        path: "{{ lookup('ansible.builtin.env', 'HOME') }}/files"
        state: directory
        mode: "0755"
                
    - name: Ensure required rpm packages installed
      yum:
        name:
          - aria2
          - qemu-img
          - pigz
        state: present
        disable_gpg_check: yes
              
    - name: Download virtual disk file
      ansible.builtin.command:
        cmd: aria2c --max-connection-per-server=5 --split=5 --quiet --check-certificate=false --header="x-kubevirt-export-token:{{ token }}" --dir="{{ lookup('ansible.builtin.env', 'HOME') }}/files" --out="disk.img" "{{ download_url }}"
        creates: "{{ lookup('ansible.builtin.env', 'HOME') }}/files/disk.img"
      
    - name: Convert the downloaded raw virtual disk to Qcow2
      ansible.builtin.command:
        cmd: qemu-img convert -q -f raw -O qcow2 "{{ lookup('ansible.builtin.env', 'HOME') }}/files/disk.img" "{{ lookup('ansible.builtin.env', 'HOME') }}/files/disk.qcow2"
        creates: "{{ lookup('ansible.builtin.env', 'HOME') }}/files/disk.qcow2"
      register: qemu
      
    - name: Remove raw disk image
      ansible.builtin.file:
        path: "{{ lookup('ansible.builtin.env', 'HOME') }}/files/disk.img"
        state: absent
        
    - name: Remove the VirtualMachineExport object
      k8s:
        state: absent
        api_version: export.kubevirt.io/v1alpha1
        kind: VirtualMachineExport
        namespace: "{{ namespace }}"
        name: vmexport-{{ vm_name }}
        wait: yes
        
    - name: Remove the VirtualMachineExport Token
      k8s:
        state: absent
        api_version: v1
        kind: Secret
        namespace: "{{ namespace }}"
        name: vmexport-token-{{ vm_name }}
        wait: yes
        
#    - name: Compress the Qcow2 disk image
#      ansible.builtin.command:
#        cmd: pigz -k "{{ lookup('ansible.builtin.env', 'HOME') }}/files/disk.qcow2"
#        creates: "{{ lookup('ansible.builtin.env', 'HOME') }}/files/disk.qcow2.gz"
